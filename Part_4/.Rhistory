# convert the df as a matrix
df.matrix_ARS <- as.matrix(ARS_longmatrix2, rownames.force = NA)
#optimal number of clusters
hier_ARS <- factoextra::fviz_nbclust(ARS_longmatrix2, kmeans, method = "s", k.max = 4)+
ggplot2::ggtitle("optimal number of clusters for hierarchical clustering")
hier_ARS
distMatrix_ARS <- dist(df.matrix_ARS, method = "euclidean")
groups_ARS <- hclust(distMatrix_ARS, method = "complete")
plot(groups_ARS, cex=0.8, hang=-1)
rect.hclust(groups_ARS, k=7)
plot(groups_ARS, cex=0.8, hang=-1)
rect.hclust(groups_ARS, k=4)
pdf("ARS_dendogram.pdf", width = 12, height = 10)
par(mar=c(12, 4, 1, 4))
dend_ARS  %>%
dendextend::set("labels_cex", 0.7) %>% # Change size
dendextend::set("branches_k_color", k = 4) %>%
plot(main = "BP enriched terms for v21_down") # plot
dev.off()
##lad_id<- labels(groups_1)
dend_ARS <- as.dendrogram(groups_ARS)
pdf("ARS_dendogram.pdf", width = 12, height = 10)
par(mar=c(12, 4, 1, 4))
dend_ARS  %>%
dendextend::set("labels_cex", 0.7) %>% # Change size
dendextend::set("branches_k_color", k = 4) %>%
plot(main = "BP enriched terms for v21_down") # plot
dev.off()
lmerARS_v10 %>%
mutate(name = fct_reorder(Gene.Names, estimate)) %>%
ggplot(aes(x = name, y = estimate, color = exp)) +
geom_pointrange(aes(ymin = lower.CL, ymax = upper.CL), position = position_dodge(width = 0.4), size = 0.4) +
geom_hline(yintercept = 0, col = "gray", size = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-7, 7, 1), limits = c(-7, 7)) +
coord_flip() +
labs(
title = "Plot of Proteins Associated with ARS at V1-V0 (p < 0.005)",
x = "Protein", y = "log2FC"
) +
theme_bw() +
theme(
axis.line = element_line(color = 'black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
View(lmerARS_v10)
View(lmerARS_v20)
VL_new <- xlsx::read.xlsx("lmer_VLvisit.xlsx", 1)
View(VL_new)
View(VL_new)
VL_newv10 <- VL_new |> dplyr::filter(visit_revpairwise == "v1 - v0")
VL_newv10_sign <- VL_newv10 |> dplyr::filter(p.global < 0.005  & p.value < 0.05)
View(VL_newv10_sign)
View(lmerARS_sign)
# A. ARS
# Get protein function information for ARS
ARS_function <- UniprotR::GetProteinFunction(lmerARS_sign$uniprot)
ARS_function$ID <- rownames(ARS_function)
View(ARS_function)
ARS_function <- ARS_function%>% dplyr::distinct(ID, .keep_all = TRUE)
View(ARS_function)
View(lmerARS_sign)
# A. ARS
# Get protein function information for ARS
ARS_function <- UniprotR::GetProteinFunction(lmerARS_sign$uniprot)
ARS_function$ID <- rownames(ARS_function)
View(ARS_function)
# A. ARS
# Get protein function information for ARS
lmerARS_sign <- lmerARS_sign %>% dplyr::distinct(uniprot, .keep_all = TRUE)
ARS_function <- UniprotR::GetProteinFunction(lmerARS_sign$uniprot)
ARS_function$ID <- rownames(ARS_function)
# Join V20_sign_0 with protein function data
ARS_function <- lmerARS_sign %>%
dplyr::inner_join(ARS_function, by = c("uniprot" = "ID"))
# Get subcellular location information for V20
ARS_loc <- UniprotR::GetSubcellular_location(lmerARS_sign$uniprot)
ARS_loc$ID <- rownames(ARS_loc)
View(ARS_loc)
hiv_interaction_ARS <- lmerARS_sign  %>%
dplyr::inner_join(hiv_interaction, by = c("Gene.Names" = "Human_GeneSymbol"))
View(hiv_interaction_ARS)
data.table::fwrite(hiv_interaction_V20_deps, "hiv_interaction_ARS.txt", sep = "\t")
# Join protein function data with subcellular location data
ARS_all_info <- ARS_function %>%
dplyr::inner_join(ARS_loc, by = c("uniprot" = "ID"))
# Write the combined data to a file
data.table::fwrite(ARS_all_info, "hiv_V20_deps_all_info.txt", sep = "\t")
View(ARS_all_info)
genes.all <- linear_df %>%
dplyr::distinct(Gene.Names)
genes.all <- linear_df %>%
dplyr::distinct(uniprot)
View(genes.all)
View(atlas)
# Join with atlas data
genes_atlas_all <- genes.all %>%
dplyr::inner_join(atlas, by = c("uniprot" = "Uniprot"))
View(genes_atlas_all)
View(genes_atlas_all)
# Process and classify secretome locations
dfall <- genes_atlas_all %>%  dplyr::select("Uniprot","Gene",
"Secretome location",  "Subcellular location")
# Process and classify secretome locations
dfall <- genes_atlas_all %>%  dplyr::select("uniprot","Gene",
"Secretome location",  "Subcellular location")
View(dfall)
dfall$"Secretome location"[dfall$"Secretome location" == "Secreted to blood"] <- "Secreted"
dfall$"Secretome location"[is.na(dfall$"Secretome location")] <- "Leakage"
dfall %>%
dplyr::group_by(`Secretome location`) %>%
dplyr::summarise(n=dplyr::n())
View(lmerARS_sign)
meancluster8 <- readr::read_tsv("meancluster8.txt")
meancluster8$Protein <-  word(meancluster8$Protein,1,sep = "\\.")
?word
meancluster8$Protein <-  stringr::word(meancluster8$Protein,1,sep = "\\.")
# Merge gene symbols back into the data and rename HGNC symbol to Gene.Names
lmerARS_gp <- merge(ARS_newv10_sign, meancluster8, by.x = "uniprot", by.y = "Protein", all.x = TRUE)
View(lmerARS_gp)
# Merge gene symbols back into the data and rename HGNC symbol to Gene.Names
lmerARS_gp <- merge(lmerARS_sign, meancluster8, by.x = "uniprot", by.y = "Protein", all.x = TRUE)
VL_new <- xlsx::read.xlsx("lmer_VLvisit.xlsx", 1)
VL_new <- xlsx::read.xlsx("lmer_VLvisit.xlsx", 1)
View(VL_new)
VL_newv10 <- VL_new |> dplyr::filter(visit_revpairwise == "v1 - v0")
View(VL_newv10)
VL_newv10_sign <- VL_newv10 |> dplyr::filter(p.global < 0.005  & p.value < 0.05)
View(VL_newv10_sign)
VL_newv20 <- VL_new |> dplyr::filter(visit_revpairwise == "v2 - v0")
VL_newv20_sign <- VL_newv20 |> dplyr::filter(p.global < 0.005  & p.value < 0.05)
View(VL_newv20_sign)
VL_new_sign <- VL_new |> dplyr::filter(p.global < 0.005)
View(VL_new_sign)
VL_new_sign <- VL_new |> dplyr::filter(p.global < 0.05)
VL_new_sign <- VL_new |> dplyr::filter(p.global < 0.05 & p.value < 0.05)
View(VL_new_sign)
View(VL_newv10_sign)
View(VL_newv20_sign)
plot(groups_ARS, cex=0.8, hang=-1)
rect.hclust(groups_ARS, k=4)
VL_new_sign <- VL_new |> dplyr::filter(p.global < 0.005 & p.value < 0.05)
# Remove double accessions
VL_newv10_sign$uniprot <- gsub("\\..*","",VL_newv10_sign$Protein)
#  Convert UniProt IDs to gene symbols using biomaRt
conversion_results_VLv10 <- biomaRt::getBM(
filters = "uniprotswissprot",
attributes = c("uniprotswissprot", "hgnc_symbol"),
values = VL_newv10_sign$uniprot,
mart = ensembl
) %>%
dplyr::distinct(uniprotswissprot, .keep_all = TRUE) #remove duplicates
View(conversion_results_VLv10)
# Merge gene symbols back into the data and rename HGNC symbol to Gene.Names
lmerVL_v10 <- merge(VL_newv10_sign, conversion_results_VLv10, by.x = "uniprot", by.y = "uniprotswissprot", all.x = TRUE) %>%
dplyr::rename(Gene.Names = hgnc_symbol)
lmerVL_v10 %>%
mutate(name = fct_reorder(Gene.Names, estimate)) %>%
ggplot(aes(x = name, y = estimate, color = exp)) +
geom_pointrange(aes(ymin = lower.CL, ymax = upper.CL), position = position_dodge(width = 0.4), size = 0.4) +
geom_hline(yintercept = 0, col = "gray", size = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-7, 7, 1), limits = c(-7, 7)) +
coord_flip() +
labs(
title = "Plot of Proteins Associated with VL at V1-V0 (p < 0.005)",
x = "Protein", y = "log2FC"
) +
theme_bw() +
theme(
axis.line = element_line(color = 'black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
pdf("VL_V10_forestplot.pdf", width = 6, height = 2)
lmerVL_v10 %>%
mutate(name = fct_reorder(Gene.Names, estimate)) %>%
ggplot(aes(x = name, y = estimate, color = exp)) +
geom_pointrange(aes(ymin = lower.CL, ymax = upper.CL), position = position_dodge(width = 0.4), size = 0.4) +
geom_hline(yintercept = 0, col = "gray", size = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-7, 7, 1), limits = c(-7, 7)) +
coord_flip() +
labs(
title = "Plot of Proteins Associated with VL at V1-V0 (p < 0.005)",
x = "Protein", y = "log2FC"
) +
theme_bw() +
theme(
axis.line = element_line(color = 'black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
dev.off()
# Remove double accessions
VL_newv20_sign$uniprot <- gsub("\\..*","",VL_newv20_sign$Protein)
#  Convert UniProt IDs to gene symbols using biomaRt
conversion_results_VLv20 <- biomaRt::getBM(
filters = "uniprotswissprot",
attributes = c("uniprotswissprot", "hgnc_symbol"),
values = VL_newv20_sign$uniprot,
mart = ensembl
) %>%
dplyr::distinct(uniprotswissprot, .keep_all = TRUE) #remove duplicates
# Merge gene symbols back into the data and rename HGNC symbol to Gene.Names
lmerVL_v20 <- merge(VL_newv20_sign, conversion_results_VLv20, by.x = "uniprot", by.y = "uniprotswissprot", all.x = TRUE) %>%
dplyr::rename(Gene.Names = hgnc_symbol)
lmerVL_v20 %>%
mutate(name = fct_reorder(Gene.Names, estimate)) %>%
ggplot(aes(x = name, y = estimate, color = exp)) +
geom_pointrange(aes(ymin = lower.CL, ymax = upper.CL), position = position_dodge(width = 0.4), size = 0.4) +
geom_hline(yintercept = 0, col = "gray", size = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-7, 7, 1), limits = c(-7, 7)) +
coord_flip() +
labs(
title = "Plot of Proteins Associated with VL at V2-V0 (p < 0.005)",
x = "Protein", y = "log2FC"
) +
theme_bw() +
theme(
axis.line = element_line(color = 'black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
VL_newv21 <- VL_new |> dplyr::filter(visit_revpairwise == "v2 - v0")
VL_newv21_sign <- VL_newv20 |> dplyr::filter(p.global < 0.005  & p.value < 0.05)
View(VL_newv21_sign)
VL_newv21 <- VL_new |> dplyr::filter(visit_revpairwise == "v2 - v1")
VL_newv21_sign <- VL_newv20 |> dplyr::filter(p.global < 0.005  & p.value < 0.05)
VL_newv21_sign <- VL_newv21 |> dplyr::filter(p.global < 0.005  & p.value < 0.05)
View(VL_newv21_sign)
# Remove double accessions
VL_newv21_sign$uniprot <- gsub("\\..*","",VL_newv21_sign$Protein)
#  Convert UniProt IDs to gene symbols using biomaRt
conversion_results_VLv21 <- biomaRt::getBM(
filters = "uniprotswissprot",
attributes = c("uniprotswissprot", "hgnc_symbol"),
values = VL_newv21_sign$uniprot,
mart = ensembl
) %>%
dplyr::distinct(uniprotswissprot, .keep_all = TRUE) #remove duplicates
# Merge gene symbols back into the data and rename HGNC symbol to Gene.Names
lmerVL_v21 <- merge(VL_newv21_sign, conversion_results_VLv21, by.x = "uniprot", by.y = "uniprotswissprot", all.x = TRUE) %>%
dplyr::rename(Gene.Names = hgnc_symbol)
lmerVL_v21 %>%
mutate(name = fct_reorder(Gene.Names, estimate)) %>%
ggplot(aes(x = name, y = estimate, color = exp)) +
geom_pointrange(aes(ymin = lower.CL, ymax = upper.CL), position = position_dodge(width = 0.4), size = 0.4) +
geom_hline(yintercept = 0, col = "gray", size = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-7, 7, 1), limits = c(-7, 7)) +
coord_flip() +
labs(
title = "Plot of Proteins Associated with VL at V2-V1 (p < 0.005)",
x = "Protein", y = "log2FC"
) +
theme_bw() +
theme(
axis.line = element_line(color = 'black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
pdf("VL_V21_forestplot.pdf", width = 6, height = 2)
lmerVL_v21 %>%
mutate(name = fct_reorder(Gene.Names, estimate)) %>%
ggplot(aes(x = name, y = estimate, color = exp)) +
geom_pointrange(aes(ymin = lower.CL, ymax = upper.CL), position = position_dodge(width = 0.4), size = 0.4) +
geom_hline(yintercept = 0, col = "gray", size = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-7, 7, 1), limits = c(-7, 7)) +
coord_flip() +
labs(
title = "Plot of Proteins Associated with VL at V2-V1 (p < 0.005)",
x = "Protein", y = "log2FC"
) +
theme_bw() +
theme(
axis.line = element_line(color = 'black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
dev.off()
#  Convert UniProt IDs to gene symbols using biomaRt
conversion_results_VL <- biomaRt::getBM(
filters = "uniprotswissprot",
attributes = c("uniprotswissprot", "hgnc_symbol"),
values = VL_new_sign$uniprot,
mart = ensembl
) %>%
dplyr::distinct(uniprotswissprot, .keep_all = TRUE) #remove duplicates
View(VL_new_sign)
View(VL_new_sign)
VL_new_sign$uniprot <- gsub("\\..*","",VL_new_sign$Protein)
#  Convert UniProt IDs to gene symbols using biomaRt
conversion_results_VL <- biomaRt::getBM(
filters = "uniprotswissprot",
attributes = c("uniprotswissprot", "hgnc_symbol"),
values = VL_new_sign$uniprot,
mart = ensembl
) %>%
dplyr::distinct(uniprotswissprot, .keep_all = TRUE) #remove duplicates
# Merge gene symbols back into the data and rename HGNC symbol to Gene.Names
lmerVL_sign <- merge(VL_new_sign, conversion_results_VL, by.x = "uniprot", by.y = "uniprotswissprot", all.x = TRUE) %>%
dplyr::rename(Gene.Names = hgnc_symbol)
View(lmerVL_sign)
# Step 1: Perform GO Enrichment Analysis
ego_VL <- clusterProfiler::enrichGO(
gene = lmerVL_sign$uniprot,
universe = backgrd_new$Protein,
OrgDb = org.Hs.eg.db,
keyType = "UNIPROT",
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
readable = TRUE
)
# Display enriched GO terms
head(ego_VL)
cluster_profiler_VL <- data.frame(ego_VL@result)
padj0.2_VL <- cluster_profiler_VL %>%
dplyr::filter(p.adjust < 0.05 & qvalue < 0.05)
View(cluster_profiler_VL)
View(ARS_newv10)
View(ARS_newv10_sign)
View(ARS_newv20_sign)
View(lmerARS_v10)
View(lmerARS_v20)
View(lmerARS_v10)
evasVL <- readRDS(file = "evasVL_data.rds")
evasVL <- readRDS(file = "evasVL_data.rds") %>%
dplyr::select(pid, Age)
View(evasVL)
evasVL <- readRDS(file = "evasVL_data.rds")
age_data <- evasVL %>%
dplyr::select(pid, Age) %>%
dplyr::distinct(pid, .keep_all = TRUE)
View(age_data)
CD4_cox <- readr::read_csv("groups_CD4_500_6w.csv")
View(CD4_cox)
View(CD4_cox)
View(CD4_cox)
View(df9d)
View(evasVL)
age_data <- evasVL %>%
dplyr::select(pid, Age, Cohort, Sex) %>%
dplyr::distinct(pid, .keep_all = TRUE)
variates <- merge(age_data, CD4_cox,
by.x = "pid", by.y = "subjid", all.x = TRUE)
View(variates)
CD4_cox <- readxl::read_excel("CD4_groups.xlsx")
#merge
variates <- merge(age_data, CD4_cox,
by.x = "pid", by.y = "ID", all.x = TRUE)
#merge
variates <- merge(age_data, CD4_cox,
by.x = "pid", by.y = "ID", all.x = TRUE) %>%
dplyr::mutate(status = ifelse(Group == "fast", "1", "0"))
#merge
variates <- merge(age_data, CD4_cox,
by.x = "pid", by.y = "ID", all.x = TRUE) %>%
dplyr::mutate(status = ifelse(Group == "Fast", "1", "0"))
dynamics <- readr::read_csv("cluster6")
dynamics <- readr::read_csv("cluster6.csv")
View(dynamics)
merged_dyn <-  merge(dynamics, variates,
by.x = "subjid", by.y = "pid", all.x = TRUE)
View(merged_dyn)
variates$pid <- sprintf("%03d", variates$pid)
merged_dyn <-  merge(dynamics, variates,
by.x = "subjid", by.y = "pid", all.x = TRUE)
View(merged_dyn)
install.packages("coxme")
# Example model: Cox proportional hazards with random effect for patient_id
# time: survival time, status: event/censor, cluster: latent cluster,
# patient_id as random effect
cox_model <- coxme(Surv(time, status) ~ cluster6 + Age + Sex + (1 | subjid), data = merged_dyn)
library(coxme)
# Example model: Cox proportional hazards with random effect for patient_id
# time: survival time, status: event/censor, cluster: latent cluster,
# patient_id as random effect
cox_model <- coxme(Surv(time, status) ~ cluster6 + Age + Sex + (1 | subjid), data = merged_dyn)
str(merged_dyn)
merged_dyn$status <- as.numeric(merged_dyn$status)
str(merged_dyn)
# Example model: Cox proportional hazards with random effect for patient_id
# time: survival time, status: event/censor, cluster: latent cluster,
# patient_id as random effect
cox_model <- coxme(Surv(time, status) ~ cluster6 + Age + Sex + (1 | subjid), data = merged_dyn)
View(cox_model)
summary(cox_model)
# Example model: Cox proportional hazards with random effect for patient_id
# time: survival time, status: event/censor, cluster: latent cluster,
# patient_id as random effect
cox_model <- coxme(Surv(time, status) ~ cluster6 + Age + Sex + Cohort + (1 | subjid), data = merged_dyn)
summary(cox_model)
cox_model
install.packages(c("broom", "openxlsx"))
# Tidy the model output
cox_results <- broom::tidy(cox_model)
# Extract summary of the model
model_summary <- summary(cox_model)
# Extract fixed effect coefficients
fixed_effects <- data.frame(
Variable = names(model_summary$coefficients),
Coefficient = model_summary$coefficients[, 1],
`Standard Error` = model_summary$coefficients[, 2],
`z-value` = model_summary$coefficients[, 3],
`p-value` = model_summary$coefficients[, 4]
)
summary(cox_model)
model_summary$coefficients
model_summary$coefficients[, 1]
model_summary$coefficients[, 2]
summary(cox_model)$coefficients
coefficients <- summary(cox_model)$coefficients
exp(coefficients[, 1])
results <- data.frame(
Variable = rownames(coefficients),
Coefficient = coefficients[, 1],
`Standard Error` = coefficients[, 2],
`z-value` = coefficients[, 3],
`p-value` = coefficients[, 4],
`Hazard Ratio (HR)` = hazard_ratios
)
hazard_ratios <- exp(coefficients[, 1])
results <- data.frame(
Variable = rownames(coefficients),
Coefficient = coefficients[, 1],
`Standard Error` = coefficients[, 2],
`z-value` = coefficients[, 3],
`p-value` = coefficients[, 4],
`Hazard Ratio (HR)` = hazard_ratios
)
View(results)
str(merged_dyn)
merged_dyn$cluster6 <- as.character(merged_dyn$cluster6)
# Example model: Cox proportional hazards with random effect for patient_id
# time: survival time, status: event/censor, cluster: latent cluster,
# patient_id as random effect
cox_model <- coxme(Surv(time, status) ~ cluster6 + Age + Sex + Cohort + (1 | subjid), data = merged_dyn)
summary(cox_model)
# Extract summary of the model
model_summary <- summary(cox_model)
coefficients <- summary(cox_model)$coefficients
hazard_ratios <- exp(coefficients[, 1])
results <- data.frame(
Variable = rownames(coefficients),
Coefficient = coefficients[, 1],
`Standard Error` = coefficients[, 2],
`z-value` = coefficients[, 3],
`p-value` = coefficients[, 4],
`Hazard Ratio (HR)` = hazard_ratios
)
coefficients[, 4]
results <- data.frame(
Variable = rownames(coefficients),
Coefficient = coefficients[, 1],
`Standard Error` = coefficients[, 3],
`z-value` = coefficients[, 4],
`p-value` = coefficients[, 5],
`Hazard Ratio (HR)` = hazard_ratios
)
# View the extracted fixed effects
print(results)
pdf("VL_V20_forestplot.pdf", width = 6, height = 2)
lmerVL_v20 %>%
mutate(name = fct_reorder(Gene.Names, estimate)) %>%
ggplot(aes(x = name, y = estimate, color = exp)) +
geom_pointrange(aes(ymin = lower.CL, ymax = upper.CL), position = position_dodge(width = 0.4), size = 0.4) +
geom_hline(yintercept = 0, col = "gray", size = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-7, 7, 1), limits = c(-7, 7)) +
coord_flip() +
labs(
title = "Plot of Proteins Associated with VL at V2-V0 (p < 0.005)",
x = "Protein", y = "log2FC"
) +
theme_bw() +
theme(
axis.line = element_line(color = 'black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
dev.off()
lmerARS_v10 %>%
mutate(name = fct_reorder(Gene.Names, estimate)) %>%
ggplot(aes(x = name, y = estimate, color = exp)) +
geom_pointrange(aes(ymin = lower.CL, ymax = upper.CL), position = position_dodge(width = 0.4), size = 0.4) +
geom_hline(yintercept = 0, col = "gray", size = 0.5, linetype = "dashed") +
scale_y_continuous(breaks = seq(-7, 7, 1), limits = c(-7, 7)) +
coord_flip() +
labs(
title = "Plot of Proteins Associated with ARS at V1-V0 (p < 0.005)",
x = "Protein", y = "log2FC"
) +
theme_bw() +
theme(
axis.line = element_line(color = 'black'),
plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
)
View(lmerARS_v10)
View(VL_new_sign)
View(VL_new_sign)
View(VL_newv10)
View(lmerVL_sign)
save.image("~/PostDoc/R_projects/proteomics_review/review/all.RData")
source("~/PostDoc/R_projects/proteomics_review/review/V20.R")
